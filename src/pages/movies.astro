---
import Layout from '../layouts/Layout.astro';
import MovieCard from '../components/MovieCard.astro';

const API_KEY = import.meta.env.API_KEY;
const API_URL = 'https://api.themoviedb.org/3/movie/popular';

// Fetch popular movies from TMDb API
const response = await fetch(`${API_URL}?api_key=${API_KEY}&language=en-US&page=1`);
const data = await response.json();
const movies = data.results;
---

<Layout title="Movie Database - All Movies">
  <div class="container">
    <header class="mb-4">
      <h1 class="mb-3">Popular Movies</h1>
      <div class="row">
        <div class="col-md-6">
          <div class="input-group mb-3">
            <input type="text" id="searchInput" class="form-control" placeholder="Search for movies..." aria-label="Search">
            <button class="btn btn-primary" type="button" id="searchButton">Search</button>
          </div>
        </div>
        <div class="col-md-6 text-md-end">
          <div class="btn-group" role="group" aria-label="Sort options">
            <button type="button" class="btn btn-outline-secondary" data-sort="popularity">Popularity</button>
            <button type="button" class="btn btn-outline-secondary" data-sort="rating">Rating</button>
            <button type="button" class="btn btn-outline-secondary" data-sort="title">Title</button>
          </div>
        </div>
      </div>
    </header>

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4" id="movieGrid">
      {movies.map((movie: any) => (
        <div class="col">
          <MovieCard 
            id={movie.id}
            title={movie.title} 
            poster={movie.poster_path} 
            rating={movie.vote_average} 
          />
        </div>
      ))}
    </div>

    <div class="d-flex justify-content-center my-5">
      <nav aria-label="Movie pagination">
        <ul class="pagination">
          <li class="page-item disabled">
            <a class="page-link" href="#" aria-label="Previous">
              <span aria-hidden="true">&laquo;</span>
            </a>
          </li>
          <li class="page-item active"><a class="page-link" href="#">1</a></li>
          <li class="page-item"><a class="page-link" href="#">2</a></li>
          <li class="page-item"><a class="page-link" href="#">3</a></li>
          <li class="page-item">
            <a class="page-link" href="#" aria-label="Next">
              <span aria-hidden="true">&raquo;</span>
            </a>
          </li>
        </ul>
      </nav>
    </div>
  </div>
</Layout>

<script>
  // Search functionality
  const searchInput = document.getElementById('searchInput') as HTMLInputElement;
  const searchButton = document.getElementById('searchButton');
  const movieGrid = document.getElementById('movieGrid');
  
  // Function to search for movies
  async function searchMovies(query: string) {
    if (!query) return;
    
    try {
      const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${import.meta.env.API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1&include_adult=false`);
      const data = await response.json();
      
      if (data.results && data.results.length > 0) {
        displaySearchResults(data.results);
      } else {
        if (movieGrid) {
          movieGrid.innerHTML = '<div class="col-12 text-center"><p>No results found. Try a different search term.</p></div>';
        }
      }
    } catch (error) {
      console.error('Error searching movies:', error);
      if (movieGrid) {
        movieGrid.innerHTML = '<div class="col-12 text-center"><p>An error occurred. Please try again later.</p></div>';
      }
    }
  }
  
  // Function to display search results
  function displaySearchResults(movies: any[]) {
    if (!movieGrid) return;
    
    movieGrid.innerHTML = '';
    
    movies.forEach(movie => {
      const posterUrl = movie.poster_path 
        ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` 
        : '/placeholder.svg';
      
      const movieCard = document.createElement('div');
      movieCard.className = 'col';
      movieCard.innerHTML = `
        <div class="card h-100 shadow-sm">
          <div class="position-relative">
            <img src="${posterUrl}" class="card-img-top" alt="${movie.title} poster" style="height: 300px; object-fit: cover;">
            <div class="rating-badge position-absolute top-0 end-0 m-2 bg-dark text-white px-2 py-1 rounded-pill">
              <i class="bi bi-star-fill text-warning me-1"></i>
              <span>${movie.vote_average.toFixed(1)}</span>
            </div>
          </div>
          <div class="card-body d-flex flex-column">
            <h5 class="card-title text-truncate">${movie.title}</h5>
            <div class="progress mt-2 mb-3" style="height: 6px;">
              <div class="progress-bar bg-success" role="progressbar" style="width: ${Math.round(movie.vote_average * 10)}%" 
                aria-valuenow="${Math.round(movie.vote_average * 10)}" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            <div class="mt-auto d-flex justify-content-between">
              <a href="/movies/${movie.id}" class="btn btn-primary btn-sm">Details</a>
              <button class="btn btn-outline-danger btn-sm favorite-btn" 
                data-movie-id="${movie.id}" 
                data-movie-title="${movie.title}" 
                data-movie-poster="${movie.poster_path}" 
                data-movie-rating="${movie.vote_average}">
                <i class="bi bi-heart"></i>
              </button>
            </div>
          </div>
        </div>
      `;
      
      movieGrid.appendChild(movieCard);
    });
    
    // Initialize favorite buttons for search results
    initFavoriteButtons();
  }
  
  // Event listeners
  if (searchButton) {
    searchButton.addEventListener('click', () => {
      searchMovies(searchInput.value.trim());
    });
  }
  
  if (searchInput) {
    searchInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        searchMovies(searchInput.value.trim());
      }
    });
  }
  
  // Sorting functionality
  const sortButtons = document.querySelectorAll('[data-sort]');
  sortButtons.forEach(button => {
    button.addEventListener('click', function(this: HTMLElement) {
      const sortType = this.getAttribute('data-sort');
      sortMovies(sortType);
      
      // Update active button
      sortButtons.forEach(btn => btn.classList.remove('active', 'btn-primary'));
      this.classList.add('active', 'btn-primary');
      this.classList.remove('btn-outline-secondary');
    });
  });
  
  async function sortMovies(sortType: string | null) {
    if (!sortType) return;
    
    try {
      // Fetch all movies again to sort
      const response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${import.meta.env.API_KEY}&language=en-US&page=1`);
      const data = await response.json();
      let sortedMovies = [...data.results];
      
      switch(sortType) {
        case 'popularity':
          // Already sorted by popularity by default
          break;
        case 'rating':
          sortedMovies.sort((a, b) => b.vote_average - a.vote_average);
          break;
        case 'title':
          sortedMovies.sort((a, b) => a.title.localeCompare(b.title));
          break;
      }
      
      displaySearchResults(sortedMovies);
    } catch (error) {
      console.error('Error sorting movies:', error);
    }
  }
  
  // Initialize favorite buttons
  function initFavoriteButtons() {
    document.querySelectorAll('.favorite-btn').forEach(btn => {
      const movieId = btn.getAttribute('data-movie-id');
      
      // Check if movie is already in favorites
      const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
      const isFavorite = favorites.some((fav: any) => fav.id == movieId);
      
      // Update button appearance if it's a favorite
      if (isFavorite) {
        const icon = btn.querySelector('i');
        if (icon) {
          icon.classList.replace('bi-heart', 'bi-heart-fill');
        }
        btn.classList.replace('btn-outline-danger', 'btn-danger');
      }
      
      btn.addEventListener('click', function(this: HTMLElement) {
        const movieId = this.getAttribute('data-movie-id');
        const movieTitle = this.getAttribute('data-movie-title');
        const moviePoster = this.getAttribute('data-movie-poster');
        const movieRating = this.getAttribute('data-movie-rating');
        
        if (movieId && movieTitle && movieRating) {
          toggleFavorite({
            id: movieId,
            title: movieTitle,
            poster_path: moviePoster,
            vote_average: parseFloat(movieRating)
          });
          
          // Toggle heart icon
          const icon = this.querySelector('i');
          if (icon) {
            if (icon.classList.contains('bi-heart')) {
              icon.classList.replace('bi-heart', 'bi-heart-fill');
              this.classList.replace('btn-outline-danger', 'btn-danger');
            } else {
              icon.classList.replace('bi-heart-fill', 'bi-heart');
              this.classList.replace('btn-danger', 'btn-outline-danger');
            }
          }
        }
      });
    });
  }
  
  // Function to toggle favorite status
  function toggleFavorite(movie: any) {
    let favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    const index = favorites.findIndex((item: any) => item.id === movie.id);
    
    if (index === -1) {
      favorites.push(movie);
      console.log(`Added ${movie.title} to favorites`);
    } else {
      favorites.splice(index, 1);
      console.log(`Removed ${movie.title} from favorites`);
    }
    
    localStorage.setItem('favorites', JSON.stringify(favorites));
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initFavoriteButtons);
</script>
