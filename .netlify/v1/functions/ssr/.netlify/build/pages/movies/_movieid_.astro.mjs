import { e as createComponent, f as createAstro, r as renderTemplate, k as renderComponent, m as maybeRenderHead, h as addAttribute } from '../../chunks/astro/server_5mRTQ9C9.mjs';
import 'kleur/colors';
import { $ as $$Layout } from '../../chunks/Layout_cKwtcVeD.mjs';
/* empty css                                        */
export { renderers } from '../../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const prerender = false;
const $$movieId = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$movieId;
  const { movieId } = Astro2.params;
  const API_KEY = "a7e7b64fe447cfe5893860a239761076";
  const movieResponse = await fetch(
    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`
  );
  const movie = await movieResponse.json();
  const creditsResponse = await fetch(
    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`
  );
  const credits = await creditsResponse.json();
  const similarResponse = await fetch(
    `https://api.themoviedb.org/3/movie/${movieId}/similar?api_key=${API_KEY}&language=en-US&page=1`
  );
  const similarMovies = await similarResponse.json();
  const releaseDate = new Date(movie.release_date).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric"
  });
  const director = credits.crew.find(
    (person) => person.job === "Director"
  );
  const topCast = credits.cast.slice(0, 6);
  const similarMoviesList = similarMovies.results.slice(0, 4);
  function formatRuntime(minutes) {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}h ${mins}m`;
  }
  return renderTemplate(_a || (_a = __template(["", '  <script>\n\n  // Favorite functionality\n  const favoriteBtn = document.getElementById(\n    "favoriteBtn"\n  );\n\n  // Check if movie is already in favorites\n  function checkFavoriteStatus(movieId) {\n    const favorites = JSON.parse(\n      localStorage.getItem("favorites") || "[]"\n    );\n    return favorites.some(\n      (movie) => movie.id.toString() === movieId.toString()\n    );\n  }\n\n  // Update button appearance\n  function updateFavoriteButton(isFavorite) {\n    if (!favoriteBtn) return;\n\n    const icon = favoriteBtn.querySelector("i");\n\n    if (isFavorite) {\n      favoriteBtn.textContent = "";\n      if (icon) {\n        icon.classList.replace("bi-heart", "bi-heart-fill");\n      } else {\n        const newIcon = document.createElement("i");\n        newIcon.className = "bi bi-heart-fill me-2";\n        favoriteBtn.prepend(newIcon);\n      }\n      favoriteBtn.appendChild(document.createTextNode("Remove from Favorites"));\n\n      // Only replace class if it exists\n      if (favoriteBtn.classList.contains("btn-outline-danger")) {\n        favoriteBtn.classList.replace("btn-outline-danger", "btn-danger");\n      }\n    } else {\n      favoriteBtn.textContent = "";\n      if (icon) {\n        icon.classList.replace("bi-heart-fill", "bi-heart");\n      } else {\n        const newIcon = document.createElement("i");\n        newIcon.className = "bi bi-heart me-2";\n        favoriteBtn.prepend(newIcon);\n      }\n      favoriteBtn.appendChild(document.createTextNode("Add to Favorites"));\n\n      // Only replace class if it exists\n      if (favoriteBtn.classList.contains("btn-danger")) {\n        favoriteBtn.classList.replace("btn-danger", "btn-outline-danger");\n      }\n    }\n  }\n\n  // Toggle favorite status\n  function toggleFavorite(movie) {\n    let favorites = JSON.parse(\n      localStorage.getItem("favorites") || "[]"\n    );\n    const index = favorites.findIndex(\n      (item) => item.id.toString() === movie.id.toString()\n    );\n\n    if (index === -1) {\n      favorites.push(movie);\n      console.log(`Added ${movie.title} to favorites`);\n      updateFavoriteButton(true);\n    } else {\n      favorites.splice(index, 1);\n      console.log(`Removed ${movie.title} from favorites`);\n      updateFavoriteButton(false);\n    }\n\n    localStorage.setItem("favorites", JSON.stringify(favorites));\n  }\n\n  // Initialize on page load\n  document.addEventListener("DOMContentLoaded", () => {\n    if (!favoriteBtn) return;\n\n    const movieId = favoriteBtn.getAttribute("data-movie-id");\n    if (!movieId) return;\n\n    // Check if movie is already in favorites\n    const isFavorite = checkFavoriteStatus(movieId);\n    updateFavoriteButton(isFavorite);\n\n    // Add click event listener\n    favoriteBtn.addEventListener("click", async () => {\n      // Get current movie data\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}?api_key=${import.meta.env.API_KEY}&language=en-US`\n        );\n        const movieData = await response.json();\n\n        toggleFavorite({\n          id: movieData.id,\n          title: movieData.title,\n          poster_path: movieData.poster_path,\n          vote_average: movieData.vote_average,\n        });\n      } catch (error) {\n        console.error("Error toggling favorite:", error);\n      }\n    });\n  });\n</script>'], ["", '  <script>\n\n  // Favorite functionality\n  const favoriteBtn = document.getElementById(\n    "favoriteBtn"\n  );\n\n  // Check if movie is already in favorites\n  function checkFavoriteStatus(movieId) {\n    const favorites = JSON.parse(\n      localStorage.getItem("favorites") || "[]"\n    );\n    return favorites.some(\n      (movie) => movie.id.toString() === movieId.toString()\n    );\n  }\n\n  // Update button appearance\n  function updateFavoriteButton(isFavorite) {\n    if (!favoriteBtn) return;\n\n    const icon = favoriteBtn.querySelector("i");\n\n    if (isFavorite) {\n      favoriteBtn.textContent = "";\n      if (icon) {\n        icon.classList.replace("bi-heart", "bi-heart-fill");\n      } else {\n        const newIcon = document.createElement("i");\n        newIcon.className = "bi bi-heart-fill me-2";\n        favoriteBtn.prepend(newIcon);\n      }\n      favoriteBtn.appendChild(document.createTextNode("Remove from Favorites"));\n\n      // Only replace class if it exists\n      if (favoriteBtn.classList.contains("btn-outline-danger")) {\n        favoriteBtn.classList.replace("btn-outline-danger", "btn-danger");\n      }\n    } else {\n      favoriteBtn.textContent = "";\n      if (icon) {\n        icon.classList.replace("bi-heart-fill", "bi-heart");\n      } else {\n        const newIcon = document.createElement("i");\n        newIcon.className = "bi bi-heart me-2";\n        favoriteBtn.prepend(newIcon);\n      }\n      favoriteBtn.appendChild(document.createTextNode("Add to Favorites"));\n\n      // Only replace class if it exists\n      if (favoriteBtn.classList.contains("btn-danger")) {\n        favoriteBtn.classList.replace("btn-danger", "btn-outline-danger");\n      }\n    }\n  }\n\n  // Toggle favorite status\n  function toggleFavorite(movie) {\n    let favorites = JSON.parse(\n      localStorage.getItem("favorites") || "[]"\n    );\n    const index = favorites.findIndex(\n      (item) => item.id.toString() === movie.id.toString()\n    );\n\n    if (index === -1) {\n      favorites.push(movie);\n      console.log(\\`Added \\${movie.title} to favorites\\`);\n      updateFavoriteButton(true);\n    } else {\n      favorites.splice(index, 1);\n      console.log(\\`Removed \\${movie.title} from favorites\\`);\n      updateFavoriteButton(false);\n    }\n\n    localStorage.setItem("favorites", JSON.stringify(favorites));\n  }\n\n  // Initialize on page load\n  document.addEventListener("DOMContentLoaded", () => {\n    if (!favoriteBtn) return;\n\n    const movieId = favoriteBtn.getAttribute("data-movie-id");\n    if (!movieId) return;\n\n    // Check if movie is already in favorites\n    const isFavorite = checkFavoriteStatus(movieId);\n    updateFavoriteButton(isFavorite);\n\n    // Add click event listener\n    favoriteBtn.addEventListener("click", async () => {\n      // Get current movie data\n      try {\n        const response = await fetch(\n          \\`https://api.themoviedb.org/3/movie/\\${movieId}?api_key=\\${import.meta.env.API_KEY}&language=en-US\\`\n        );\n        const movieData = await response.json();\n\n        toggleFavorite({\n          id: movieData.id,\n          title: movieData.title,\n          poster_path: movieData.poster_path,\n          vote_average: movieData.vote_average,\n        });\n      } catch (error) {\n        console.error("Error toggling favorite:", error);\n      }\n    });\n  });\n</script>'])), renderComponent($$result, "Layout", $$Layout, { "title": `${movie.title} - Movie Database`, "data-astro-cid-3uruytm6": true }, { "default": async ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="movie-details" data-astro-cid-3uruytm6> <!-- Movie Header --> <div class="movie-header position-relative mb-5" data-astro-cid-3uruytm6> <div class="backdrop-image"${addAttribute(`background-image: url(https://image.tmdb.org/t/p/original${movie.backdrop_path || movie.poster_path})`, "style")} data-astro-cid-3uruytm6></div> <div class="backdrop-overlay" data-astro-cid-3uruytm6></div> <div class="container position-relative" data-astro-cid-3uruytm6> <div class="row py-5" data-astro-cid-3uruytm6> <div class="col-lg-4 mb-4 mb-lg-0" data-astro-cid-3uruytm6> <div class="poster-container" data-astro-cid-3uruytm6> <img${addAttribute(movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : "/placeholder.svg", "src")}${addAttribute(`${movie.title} poster`, "alt")} class="img-fluid rounded shadow poster-image" data-astro-cid-3uruytm6> <div class="poster-rating position-absolute" data-astro-cid-3uruytm6> <div class="rating-circle" data-astro-cid-3uruytm6> <svg viewBox="0 0 36 36" class="rating-circle-svg" data-astro-cid-3uruytm6> <path class="rating-circle-bg" d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831" data-astro-cid-3uruytm6></path> <path class="rating-circle-fill"${addAttribute(`${movie.vote_average * 10}, 100`, "stroke-dasharray")} d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831" data-astro-cid-3uruytm6></path> <text x="18" y="21" class="rating-text" data-astro-cid-3uruytm6>${movie.vote_average.toFixed(1)}</text> </svg> </div> </div> </div> </div> <div class="col-lg-8" data-astro-cid-3uruytm6> <div class="movie-info text-white" data-astro-cid-3uruytm6> <h1 class="movie-title" data-astro-cid-3uruytm6> ${movie.title} <span class="release-year" data-astro-cid-3uruytm6>(${movie.release_date ? movie.release_date.substring(0, 4) : "N/A"})</span> </h1> <div class="movie-meta d-flex flex-wrap align-items-center mb-4" data-astro-cid-3uruytm6> <span class="meta-item" data-astro-cid-3uruytm6>${releaseDate}</span> ${movie.runtime > 0 && renderTemplate`<span class="meta-item" data-astro-cid-3uruytm6> ${formatRuntime(movie.runtime)} </span>`} ${movie.original_language && renderTemplate`<span class="meta-item text-uppercase" data-astro-cid-3uruytm6> ${movie.original_language} </span>`} </div> <div class="genres mb-4" data-astro-cid-3uruytm6> ${movie.genres.map((genre) => renderTemplate`<span class="genre-badge" data-astro-cid-3uruytm6>${genre.name}</span>`)} </div> <div class="overview-section mb-4" data-astro-cid-3uruytm6> <h5 class="section-title" data-astro-cid-3uruytm6>Overview</h5> <p class="overview-text" data-astro-cid-3uruytm6> ${movie.overview || "No overview available."} </p> </div> ${director && renderTemplate`<div class="director-section mb-4" data-astro-cid-3uruytm6> <h5 class="section-title" data-astro-cid-3uruytm6>Director</h5> <p class="director-name" data-astro-cid-3uruytm6>${director.name}</p> </div>`} <div class="action-buttons d-flex flex-wrap mt-4" data-astro-cid-3uruytm6> <button id="favoriteBtn" class="btn-favorite"${addAttribute(movie.id, "data-movie-id")} data-astro-cid-3uruytm6> <i class="bi bi-heart me-2" data-astro-cid-3uruytm6></i>
Add to Favorites
</button> ${movie.homepage && renderTemplate`<a${addAttribute(movie.homepage, "href")} target="_blank" rel="noopener noreferrer" class="btn-website" data-astro-cid-3uruytm6> <i class="bi bi-link-45deg me-2" data-astro-cid-3uruytm6></i>
Official Website
</a>`} </div> </div> </div> </div> </div> </div> <!-- Cast Section --> <div class="container mb-5" data-astro-cid-3uruytm6> <h2 class="section-heading" data-astro-cid-3uruytm6>Top Cast</h2> <div class="row row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-6 g-4" data-astro-cid-3uruytm6> ${topCast.map((person) => renderTemplate`<div class="col" data-astro-cid-3uruytm6> <div class="cast-card" data-astro-cid-3uruytm6> <div class="cast-image-container" data-astro-cid-3uruytm6> <img${addAttribute(
    person.profile_path ? `https://image.tmdb.org/t/p/w185${person.profile_path}` : "/placeholder-person.svg",
    "src"
  )} class="cast-image"${addAttribute(person.name, "alt")} data-astro-cid-3uruytm6> </div> <div class="cast-info" data-astro-cid-3uruytm6> <h6 class="cast-name" data-astro-cid-3uruytm6>${person.name}</h6> <p class="cast-character" data-astro-cid-3uruytm6>${person.character}</p> </div> </div> </div>`)} </div> </div> <!-- Similar Movies Section --> ${similarMoviesList.length > 0 && renderTemplate`<div class="container mb-5" data-astro-cid-3uruytm6> <h2 class="section-heading" data-astro-cid-3uruytm6>Similar Movies</h2> <div class="row row-cols-1 row-cols-sm-2 row-cols-md-4 g-4" data-astro-cid-3uruytm6> ${similarMoviesList.map((similarMovie) => renderTemplate`<div class="col" data-astro-cid-3uruytm6> <div class="similar-movie-card" data-astro-cid-3uruytm6> <div class="similar-poster-container" data-astro-cid-3uruytm6> <img${addAttribute(
    similarMovie.poster_path ? `https://image.tmdb.org/t/p/w500${similarMovie.poster_path}` : "/placeholder.svg",
    "src"
  )} class="similar-poster"${addAttribute(similarMovie.title, "alt")} data-astro-cid-3uruytm6> <div class="similar-overlay" data-astro-cid-3uruytm6> <a${addAttribute(`/movies/${similarMovie.id}`, "href")} class="similar-details-btn" data-astro-cid-3uruytm6> <i class="bi bi-info-circle" data-astro-cid-3uruytm6></i> </a> </div> </div> <div class="similar-movie-info" data-astro-cid-3uruytm6> <h5 class="similar-movie-title" data-astro-cid-3uruytm6>${similarMovie.title}</h5> <div class="similar-movie-meta" data-astro-cid-3uruytm6> <span class="similar-movie-rating" data-astro-cid-3uruytm6> <i class="bi bi-star-fill" data-astro-cid-3uruytm6></i> ${similarMovie.vote_average.toFixed(1)} </span> <span class="similar-movie-year" data-astro-cid-3uruytm6> ${similarMovie.release_date ? similarMovie.release_date.substring(0, 4) : "N/A"} </span> </div> </div> </div> </div>`)} </div> </div>`} </div> ` }));
}, "/Users/mac/Desktop/miirshe/SiteProjects/movie-database/src/pages/movies/[movieId].astro", void 0);
const $$file = "/Users/mac/Desktop/miirshe/SiteProjects/movie-database/src/pages/movies/[movieId].astro";
const $$url = "/movies/[movieId]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$movieId,
  file: $$file,
  prerender,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
