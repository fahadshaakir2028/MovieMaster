---
import Layout from "../../layouts/Layout.astro";

export interface Props {
  movieId: string;
}

// Enable server-side rendering for all movie IDs
// This is more practical for a movie database with thousands of potential movie IDs
export const prerender = false;

const { movieId } = Astro.params;
const API_KEY = import.meta.env.API_KEY;

// Fetch movie details
const movieResponse = await fetch(
  `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`
);
const movie = (await movieResponse.json()) as Movie;

// Define credits interface
interface Credits {
  cast: Person[];
  crew: Person[];
}

// Fetch movie credits
const creditsResponse = await fetch(
  `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`
);
const credits = (await creditsResponse.json()) as Credits;

// Define similar movies response interface
interface SimilarMoviesResponse {
  results: SimilarMovie[];
}

// Fetch similar movies
const similarResponse = await fetch(
  `https://api.themoviedb.org/3/movie/${movieId}/similar?api_key=${API_KEY}&language=en-US&page=1`
);
const similarMovies = (await similarResponse.json()) as SimilarMoviesResponse;

// Format release date
const releaseDate = new Date(movie.release_date).toLocaleDateString("en-US", {
  year: "numeric",
  month: "long",
  day: "numeric",
});

// Define interfaces for API responses
interface Person {
  id: number;
  name: string;
  profile_path: string | null;
  job?: string;
  character?: string;
}

interface Movie {
  id: number;
  title: string;
  poster_path: string | null;
  backdrop_path: string | null;
  vote_average: number;
  release_date: string;
  runtime: number;
  overview: string;
  genres: Array<{ id: number; name: string }>;
  original_language: string;
  homepage: string | null;
}

// Get director
const director = credits.crew.find(
  (person: Person) => person.job === "Director"
);

// Get top cast (limit to 6)
const topCast = credits.cast.slice(0, 6) as Person[];

// Define interface for similar movies
interface SimilarMovie {
  id: number;
  title: string;
  poster_path: string | null;
  vote_average: number;
  release_date: string;
}

// Get similar movies (limit to 4)
const similarMoviesList = similarMovies.results.slice(0, 4) as SimilarMovie[];

// Format runtime
function formatRuntime(minutes: number): string {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  return `${hours}h ${mins}m`;
}
---

<Layout title={`${movie.title} - Movie Database`}>
  <div class="movie-details">
    <!-- Movie Header -->
    <div class="movie-header position-relative mb-5">
      <div
        class="backdrop-image"
        style={`background-image: url(https://image.tmdb.org/t/p/original${movie.backdrop_path || movie.poster_path})`}
      >
      </div>
      <div class="backdrop-overlay"></div>
      <div class="container position-relative">
        <div class="row py-5">
          <div class="col-lg-4 mb-4 mb-lg-0">
            <div class="poster-container">
              <img
                src={movie.poster_path
                  ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`
                  : "/placeholder.svg"}
                alt={`${movie.title} poster`}
                class="img-fluid rounded shadow poster-image"
              />
              <div class="poster-rating position-absolute">
                <div class="rating-circle">
                  <svg viewBox="0 0 36 36" class="rating-circle-svg">
                    <path
                      class="rating-circle-bg"
                      d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831"
                    ></path>
                    <path
                      class="rating-circle-fill"
                      stroke-dasharray={`${movie.vote_average * 10}, 100`}
                      d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831"
                    ></path>
                    <text x="18" y="21" class="rating-text"
                      >{movie.vote_average.toFixed(1)}</text
                    >
                  </svg>
                </div>
              </div>
            </div>
          </div>
          <div class="col-lg-8">
            <div class="movie-info text-white">
              <h1 class="movie-title">
                {movie.title}
                <span class="release-year"
                  >({
                    movie.release_date
                      ? movie.release_date.substring(0, 4)
                      : "N/A"
                  })</span
                >
              </h1>

              <div class="movie-meta d-flex flex-wrap align-items-center mb-4">
                <span class="meta-item">{releaseDate}</span>
                {
                  movie.runtime > 0 && (
                    <span class="meta-item">
                      {formatRuntime(movie.runtime)}
                    </span>
                  )
                }
                {
                  movie.original_language && (
                    <span class="meta-item text-uppercase">
                      {movie.original_language}
                    </span>
                  )
                }
              </div>

              <div class="genres mb-4">
                {
                  movie.genres.map((genre) => (
                    <span class="genre-badge">{genre.name}</span>
                  ))
                }
              </div>

              <div class="overview-section mb-4">
                <h5 class="section-title">Overview</h5>
                <p class="overview-text">
                  {movie.overview || "No overview available."}
                </p>
              </div>

              {
                director && (
                  <div class="director-section mb-4">
                    <h5 class="section-title">Director</h5>
                    <p class="director-name">{director.name}</p>
                  </div>
                )
              }

              <div class="action-buttons d-flex flex-wrap mt-4">
                <button
                  id="favoriteBtn"
                  class="btn-favorite"
                  data-movie-id={movie.id}
                >
                  <i class="bi bi-heart me-2"></i>
                  Add to Favorites
                </button>
                {
                  movie.homepage && (
                    <a
                      href={movie.homepage}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="btn-website"
                    >
                      <i class="bi bi-link-45deg me-2" />
                      Official Website
                    </a>
                  )
                }
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Cast Section -->
    <div class="container mb-5">
      <h2 class="section-heading">Top Cast</h2>
      <div class="row row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-6 g-4">
        {
          topCast.map((person) => (
            <div class="col">
              <div class="cast-card">
                <div class="cast-image-container">
                  <img
                    src={
                      person.profile_path
                        ? `https://image.tmdb.org/t/p/w185${person.profile_path}`
                        : "/placeholder-person.svg"
                    }
                    class="cast-image"
                    alt={person.name}
                  />
                </div>
                <div class="cast-info">
                  <h6 class="cast-name">{person.name}</h6>
                  <p class="cast-character">{person.character}</p>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>

    <!-- Similar Movies Section -->
    {
      similarMoviesList.length > 0 && (
        <div class="container mb-5">
          <h2 class="section-heading">Similar Movies</h2>
          <div class="row row-cols-1 row-cols-sm-2 row-cols-md-4 g-4">
            {similarMoviesList.map((similarMovie) => (
              <div class="col">
                <div class="similar-movie-card">
                  <div class="similar-poster-container">
                    <img
                      src={
                        similarMovie.poster_path
                          ? `https://image.tmdb.org/t/p/w500${similarMovie.poster_path}`
                          : "/placeholder.svg"
                      }
                      class="similar-poster"
                      alt={similarMovie.title}
                    />
                    <div class="similar-overlay">
                      <a
                        href={`/movies/${similarMovie.id}`}
                        class="similar-details-btn"
                      >
                        <i class="bi bi-info-circle" />
                      </a>
                    </div>
                  </div>
                  <div class="similar-movie-info">
                    <h5 class="similar-movie-title">{similarMovie.title}</h5>
                    <div class="similar-movie-meta">
                      <span class="similar-movie-rating">
                        <i class="bi bi-star-fill" />
                        {similarMovie.vote_average.toFixed(1)}
                      </span>
                      <span class="similar-movie-year">
                        {similarMovie.release_date
                          ? similarMovie.release_date.substring(0, 4)
                          : "N/A"}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }
  </div>
</Layout>

<style>
  /* Movie Header Styles */
  .backdrop-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    filter: brightness(0.3);
    z-index: 0;
  }

  .backdrop-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 0.8) 0%,
      rgba(0, 0, 0, 0.5) 50%,
      rgba(0, 0, 0, 0.8) 100%
    );
    z-index: 0;
  }

  .movie-header {
    background-color: #000;
    color: white;
    overflow: hidden;
    min-height: 550px;
    padding: 2rem 0;
  }

  .poster-container {
    position: relative;
    z-index: 1;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    transition: transform 0.3s ease;
  }

  .poster-container:hover {
    transform: translateY(-5px);
  }

  .poster-image {
    width: 100%;
    height: auto;
    display: block;
  }

  .poster-rating {
    bottom: 15px;
    right: 15px;
    z-index: 2;
  }

  .rating-circle {
    width: 60px;
    height: 60px;
  }

  .rating-circle-svg {
    width: 100%;
    height: 100%;
  }

  .rating-circle-bg {
    fill: none;
    stroke: rgba(255, 255, 255, 0.2);
    stroke-width: 3;
  }

  .rating-circle-fill {
    fill: none;
    stroke: #4caf50;
    stroke-width: 3;
    stroke-linecap: round;
    transform: rotate(-90deg);
    transform-origin: center;
    transition: stroke-dasharray 0.8s ease;
  }

  .rating-text {
    fill: white;
    font-size: 10px;
    font-weight: bold;
    text-anchor: middle;
    dominant-baseline: middle;
  }

  .movie-info {
    position: relative;
    z-index: 1;
    padding-left: 1.5rem;
  }

  .movie-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    line-height: 1.2;
  }

  .release-year {
    font-size: 1.5rem;
    opacity: 0.7;
    font-weight: 400;
  }

  .movie-meta {
    margin-bottom: 1.5rem;
  }

  .meta-item {
    background-color: rgba(255, 255, 255, 0.1);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    margin-right: 1rem;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    display: inline-block;
  }

  .genre-badge {
    display: inline-block;
    background-color: rgba(255, 255, 255, 0.15);
    color: white;
    padding: 0.4rem 1rem;
    border-radius: 20px;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    transition: all 0.2s ease;
  }

  .genre-badge:hover {
    background-color: rgba(255, 255, 255, 0.25);
    transform: translateY(-2px);
  }

  .section-title {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: rgba(255, 255, 255, 0.9);
  }

  .overview-text {
    font-size: 1.1rem;
    line-height: 1.6;
    opacity: 0.9;
  }

  .director-name {
    font-size: 1.1rem;
    opacity: 0.9;
  }

  .action-buttons {
    gap: 1rem;
  }

  .btn-favorite,
  .btn-website {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.7rem 1.5rem;
    border-radius: 30px;
    font-weight: 500;
    transition: all 0.3s ease;
    text-decoration: none;
    border: none;
    cursor: pointer;
  }

  .btn-favorite {
    background-color: rgba(220, 53, 69, 0.2);
    color: white;
  }

  .btn-favorite:hover {
    background-color: #dc3545;
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(220, 53, 69, 0.3);
  }

  .btn-website {
    background-color: rgba(255, 255, 255, 0.1);
    color: white;
  }

  .btn-website:hover {
    background-color: rgba(255, 255, 255, 0.2);
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(255, 255, 255, 0.1);
  }

  /* Cast Section Styles */
  .section-heading {
    font-size: 1.8rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    position: relative;
    padding-bottom: 0.5rem;
  }

  .section-heading::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 60px;
    height: 3px;
    background-color: #007bff;
    border-radius: 3px;
  }

  .cast-card {
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    height: 100%;
    background-color: white;
  }

  .cast-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
  }

  .cast-image-container {
    height: 240px;
    overflow: hidden;
  }

  .cast-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .cast-card:hover .cast-image {
    transform: scale(1.05);
  }

  .cast-info {
    padding: 1rem;
  }

  .cast-name {
    font-weight: 600;
    margin-bottom: 0.3rem;
    font-size: 1rem;
  }

  .cast-character {
    color: #6c757d;
    font-size: 0.9rem;
    margin-bottom: 0;
  }

  /* Similar Movies Styles */
  .similar-movie-card {
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    height: 100%;
    background-color: white;
  }

  .similar-movie-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
  }

  .similar-poster-container {
    height: 320px;
    position: relative;
    overflow: hidden;
  }

  .similar-poster {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .similar-movie-card:hover .similar-poster {
    transform: scale(1.05);
  }

  .similar-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 0) 50%,
      rgba(0, 0, 0, 0.8) 100%
    );
    opacity: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 0.3s ease;
  }

  .similar-movie-card:hover .similar-overlay {
    opacity: 1;
  }

  .similar-details-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: rgba(0, 123, 255, 0.8);
    color: white;
    font-size: 1.5rem;
    transform: translateY(20px);
    opacity: 0;
    transition: all 0.3s ease 0.1s;
    text-decoration: none;
  }

  .similar-movie-card:hover .similar-details-btn {
    transform: translateY(0);
    opacity: 1;
  }

  .similar-movie-info {
    padding: 1rem;
  }

  .similar-movie-title {
    font-weight: 600;
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .similar-movie-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .similar-movie-rating {
    display: flex;
    align-items: center;
    color: #ffc107;
    font-weight: 600;
  }

  .similar-movie-rating i {
    margin-right: 0.3rem;
  }

  .similar-movie-year {
    color: #6c757d;
    font-size: 0.9rem;
  }

  @media (max-width: 992px) {
    .movie-title {
      font-size: 2rem;
    }

    .movie-info {
      padding-left: 0;
      margin-top: 1rem;
    }
  }

  @media (max-width: 768px) {
    .movie-header {
      min-height: auto;
    }

    .cast-image-container {
      height: 200px;
    }

    .similar-poster-container {
      height: 250px;
    }
  }
</style>

<script is:inline>

  // Favorite functionality
  const favoriteBtn = document.getElementById(
    "favoriteBtn"
  );

  // Check if movie is already in favorites
  function checkFavoriteStatus(movieId) {
    const favorites = JSON.parse(
      localStorage.getItem("favorites") || "[]"
    );
    return favorites.some(
      (movie) => movie.id.toString() === movieId.toString()
    );
  }

  // Update button appearance
  function updateFavoriteButton(isFavorite) {
    if (!favoriteBtn) return;

    const icon = favoriteBtn.querySelector("i");

    if (isFavorite) {
      favoriteBtn.textContent = "";
      if (icon) {
        icon.classList.replace("bi-heart", "bi-heart-fill");
      } else {
        const newIcon = document.createElement("i");
        newIcon.className = "bi bi-heart-fill me-2";
        favoriteBtn.prepend(newIcon);
      }
      favoriteBtn.appendChild(document.createTextNode("Remove from Favorites"));

      // Only replace class if it exists
      if (favoriteBtn.classList.contains("btn-outline-danger")) {
        favoriteBtn.classList.replace("btn-outline-danger", "btn-danger");
      }
    } else {
      favoriteBtn.textContent = "";
      if (icon) {
        icon.classList.replace("bi-heart-fill", "bi-heart");
      } else {
        const newIcon = document.createElement("i");
        newIcon.className = "bi bi-heart me-2";
        favoriteBtn.prepend(newIcon);
      }
      favoriteBtn.appendChild(document.createTextNode("Add to Favorites"));

      // Only replace class if it exists
      if (favoriteBtn.classList.contains("btn-danger")) {
        favoriteBtn.classList.replace("btn-danger", "btn-outline-danger");
      }
    }
  }

  // Toggle favorite status
  function toggleFavorite(movie) {
    let favorites = JSON.parse(
      localStorage.getItem("favorites") || "[]"
    );
    const index = favorites.findIndex(
      (item) => item.id.toString() === movie.id.toString()
    );

    if (index === -1) {
      favorites.push(movie);
      console.log(`Added ${movie.title} to favorites`);
      updateFavoriteButton(true);
    } else {
      favorites.splice(index, 1);
      console.log(`Removed ${movie.title} from favorites`);
      updateFavoriteButton(false);
    }

    localStorage.setItem("favorites", JSON.stringify(favorites));
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", () => {
    if (!favoriteBtn) return;

    const movieId = favoriteBtn.getAttribute("data-movie-id");
    if (!movieId) return;

    // Check if movie is already in favorites
    const isFavorite = checkFavoriteStatus(movieId);
    updateFavoriteButton(isFavorite);

    // Add click event listener
    favoriteBtn.addEventListener("click", async () => {
      // Get current movie data
      try {
        const response = await fetch(
          `https://api.themoviedb.org/3/movie/${movieId}?api_key=${import.meta.env.API_KEY}&language=en-US`
        );
        const movieData = await response.json();

        toggleFavorite({
          id: movieData.id,
          title: movieData.title,
          poster_path: movieData.poster_path,
          vote_average: movieData.vote_average,
        });
      } catch (error) {
        console.error("Error toggling favorite:", error);
      }
    });
  });
</script>
